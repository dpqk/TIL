@코드가 존재하리라
 - 코드는 요구사항을 상세히 표현하는 수단
 - 제대로 명시된 요구사항은 코드만큼 정형적이며 테스트 케이스로 사용해도 좋다
 
 - 고행(wading): 나쁜 코드를 헤쳐나간다
 - 르블랑의 법칙(leblanc's Law): 나중은 결코 오지 않는다.
 
 - 나쁜코드가 쌓일수록 팀 생산성을 떨어진다. 마침내 0에 근접한다.
 
 - 환자가 수술전에 손을 씻지말라고 요구한다 -> 환자말을 따르는 행동은(범죄일 뿐만 아니라) 전문가 답지 못하다.
  -> 나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 전문가답지 못하다.
  
 - 논리가 간단해야 버그가 숨어들지 못한다. [비야네 스트롭스트룹]
 - 나쁜코드는 나쁜 코드를 '유혹'한다!
 - 깨끗한 코드는 누군가 주의 깊게 짰다는 느낌을 준다. 고치려고 살펴봐도 딱히 손 댈 곳이 없다.[마이클 페더스]
 
 -코드는
  -> 모든 테스트를 통과한다.
  -> 중복이 없다.
  -> 시스템 내 모든 설계 아이디어를 표현한다.
  -> 클래스, 메서드, 함수 등을 최대한 줄인다.
  
 - 코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드라 불러도 되겠다.[워드 커닝햄]
 
 - 보이스카우트 규칙 : 캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라!
 
 ----------------------------------------------------------------------------------------------------------------------------------
 ----------------------------------------------------------------------------------------------------------------------------------
 
 @의미 있는 이름
  - 의도가 분명하게 이름을 지어라.
  - 프로그래머는 코드에 그릇된 단서를 남겨서는 안된다.
  - 발음하기 쉬운 이름을 사용하라
  - 긴 이름이 짧은 이름보다 좋다. 검색하기 쉬운 이름이 상수보다 좋다.
  - 인코딩을 피하라 -> 거의 발음하기 어려우며 오타가 생기기도 쉽다.
  
  - 자신의 기억력을 자랑하지 마라
   -> 코드를 읽으면서 변수 이름을 자신이 아는 이름으로 변환해야 한다면 그 변수 이름은 바람직하지 못하다.
 
  - 전문가 프로그래머 : 명료함이 최고.
  
  - 기발한 이름은 피하라.
   -> 재미난 이름보다 명료한 이름을 선택하라.
   -> 의도를 분명하고 솔직하게 표현하라.
 
  - 한 개념에 한 단어를 사용하라.
   -> 일관성 있는 어휘로 코드를 작성할 것!
  
  - 말장난을 하지마라.
   -> 한 단어를 두 가지 목적으로 사용하지 마라.
   -> 대충 훑어봐도 이해할 코드 작성이 목표.
   
  - 해법, 문제 영역에서 가져온 이름을 사용하라.
   -> 해법 : 기술 개념에는 기술 이름이 가장 적합한 선택이다.
   -> 문제 : 문제 영역 개념과 관련이 깊은 코드라면 문제 영역에서 이름을 가져와야 한다.
   
  - 불필요한 맥락을 없애라.
   -> 의미가 분명한 경우에 한해서 불필요한 맥락을 추가하지 않도록 한다.
  
  - 좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고, 문화적인 배경이 같아야한다.
  - 좋은 이름은 선택하는 건 기술, 비즈니스, 관리 문제가 아닌 교육 문제.
  
  - 다른 사람이 짠 코드를 손본다면 리팩터링 도구를 사용해 문제 해결 목적으로 이름을 개선하라
   
  
